/* Generated file based on ejs templates */
define([], function() {
    return {
    "combine_templates.js.ejs": "/*\n* Copyright (C) 2014 Vanderbilt University, All rights reserved.\n*\n* Author: Zsolt Lattmann, Patrik Meijer\n*\n* This script will combine all ejs files in the current directory (recursively)\n* into one Templates.js file. By importing this file as TEMPLATE you can retrieve the\n* content of each original ejs file through TEMPLATES['plugin.js.ejs'].\n*\n* Usage: Run this script in the directory with the ejs-templates, e.g. '%YourPlugin%/Templates'.\n*/\n\nvar main = function () {\n    'use strict';\n    var fs = require('fs'),\n        isEjsFile = function (str) {\n            var ending = '.ejs',\n            lastIndex = str.lastIndexOf(ending);\n            return (lastIndex !== -1) && (lastIndex + ending.length === str.length);\n        },\n        walk = function (dir, done) {\n            var results = [];\n            fs.readdir(dir, function (err, list) {\n                if (err) {\n                    return done(err);\n                }\n                var i = 0;\n                (function next() {\n                    var file = list[i];\n                    if (!file) {\n                        return done(null, results);\n                    }\n                    i += 1;\n                    file = dir + '/' + file;\n                    fs.stat(file, function (err, stat) {\n                        if (stat && stat.isDirectory()) {\n                            walk(file, function (err, res) {\n                                results = results.concat(res);\n                                next();\n                            });\n                        } else {\n                            results.push(file);\n                            next();\n                        }\n                    });\n                })();\n            });\n        },\n        content = {},\n        fileName,\n        i,\n        templateContent;\n\n    walk('.', function (err, results) {\n        if (err) {\n            throw err;\n        }\n\n        for (i = 0; i < results.length; i += 1) {\n            fileName = results[i];\n            console.info(fileName);\n            if (isEjsFile(fileName)) {\n                console.info('Was ejs -> added!');\n                content[fileName.substring(2)] = fs.readFileSync(fileName, {'encoding': 'utf-8'});\n            }\n        }\n\n        console.info(content);\n        templateContent = '';\n        templateContent += '/* Generated file based on ejs templates */\\r\\n';\n        templateContent += 'define([], function() {\\r\\n';\n        templateContent += '    return ' + JSON.stringify(content, null, 4);\n        templateContent += '});';\n\n        fs.writeFileSync('Templates.js', templateContent);\n        console.info('Created Templates.js');\n    });\n};\n\nif (require.main === module) {\n    main();\n}",
    "meta.js.ejs": "/**\n* Generated by PluginGenerator from webgme on <%= date %>.\n*/\n\ndefine([], function () {\n    'use strict';\n    return {\n<%\nvar nodeData, i;\nfor (i = 0; i < metaNodes.length; i += 1) {\n    nodeData = metaNodes[i];%>        '<%= nodeData.name %>': '<%= nodeData.path %>',\n<%}%>    };\n});",
    "plugin.js.ejs": "/*globals define*/\n/*jshint node:true, browser:true*/\n\n/**\n* Generated by PluginGenerator from webgme on <%= date %>.\n*/\n\ndefine(['plugin/PluginConfig', 'plugin/PluginBase', 'plugin/<%= pluginID %>/<%= pluginID %>/meta'<%if (templateType) {%>, 'common/util/ejs', 'plugin/<%=pluginID%>/<%=pluginID%>/Templates/Templates'<%}%>], function (PluginConfig, PluginBase, MetaTypes<%if (templateType) {%>, ejs, TEMPLATES<%}%>) {\n    'use strict';\n\n    /**\n    * Initializes a new instance of <%= pluginID %>.\n    * @class\n    * @augments {PluginBase}\n    * @classdesc This class represents the plugin <%= pluginID %>.\n    * @constructor\n    */\n    var <%= pluginID %> = function () {\n        // Call base class' constructor.\n        PluginBase.call(this);\n        this.metaTypes = MetaTypes;\n    };\n\n    // Prototypal inheritance from PluginBase.\n    <%= pluginID %>.prototype = Object.create(PluginBase.prototype);\n    <%= pluginID %>.prototype.constructor = <%= pluginID %>;\n\n    /**\n    * Gets the name of the <%= pluginID %>.\n    * @returns {string} The name of the plugin.\n    * @public\n    */\n    <%= pluginID %>.prototype.getName = function () {\n        return '<%= pluginName %>';\n    };\n\n    /**\n    * Gets the semantic version (semver.org) of the <%= pluginID %>.\n    * @returns {string} The version of the plugin.\n    * @public\n    */\n    <%= pluginID %>.prototype.getVersion = function () {\n        return '0.1.0';\n    };<% if (description) {%>\n\n    /**\n    * Gets the description of the <%= pluginID %>.\n    * @returns {string} The description of the plugin.\n    * @public\n    */\n    <%= pluginID %>.prototype.getDescription = function () {\n        return '<%= description %>';\n    };<%}if (configStructure) {%>\n\n    /**\n    * Gets the configuration structure for the <%= pluginID %>.\n    * The ConfigurationStructure defines the configuration for the plugin\n    * and will be used to populate the GUI when invoking the plugin from webGME.\n    * @returns {object} The version of the plugin.\n    * @public\n    */\n    <%= pluginID %>.prototype.getConfigStructure = function () {\n        return [\n            {\n                'name': 'species',\n                'displayName': 'Animal Species',\n                'regex': '^[a-zA-Z]+$',\n                'regexMessage': 'Name can only contain English characters!',\n                'description': 'Which species does the animal belong to.',\n                'value': 'Horse',\n                'valueType': 'string',\n                'readOnly': false\n            },\n            {\n                'name': 'age',\n                'displayName': 'Age',\n                'description': 'How old is the animal.',\n                'value': 3,\n                'valueType': 'number',\n                'minValue': 0,\n                'maxValue': 10000,\n                'readOnly': false\n            },\n            {\n                'name': 'carnivor',\n                'displayName': 'Carnivor',\n                'description': 'Does the animal eat other animals?',\n                'value': false,\n                'valueType': 'boolean',\n                'readOnly': false\n            },\n            {\n                'name': 'classification',\n                'displayName': 'Classification',\n                'description': '',\n                'value': 'Vertebrates',\n                'valueType': 'string',\n                'valueItems': [\n                    'Vertebrates',\n                    'Invertebrates',\n                    'Unknown'\n                ]\n            },\n            {\n                'name': 'color',\n                'displayName': 'Color',\n                'description': 'The hex color code for the animal.',\n                'readOnly': false,\n                'value': '#FF0000',\n                'regex': '^#([A-Fa-f0-9]{6})$',\n                'valueType': 'string'\n            },\n            {\n                'name': 'anAsset',\n                'displayName': 'Document',\n                'description': '',\n                'value': '',\n                'valueType': 'asset',\n                'readOnly': false\n            }\n        ];\n    };\n<%}%>\n\n    /**\n    * Main function for the plugin to execute. This will perform the execution.\n    * Notes:\n    * - Always log with the provided logger.[error,warning,info,debug].\n    * - Do NOT put any user interaction logic UI, etc. inside this method.\n    * - callback always has to be called even if error happened.\n    *\n    * @param {function(string, plugin.PluginResult)} callback - the result callback\n    */\n    <%= pluginID %>.prototype.main = function (callback) {\n        // Use self to access core, project, result, logger etc from PluginBase.\n        // These are all instantiated at this point.\n        var self = this;\n        self.updateMETA(self.metaTypes);\n        // Using the logger.\n        self.logger.debug('This is a debug message.');\n        self.logger.info('This is an info message.');\n        self.logger.warn('This is a warning message.');\n        self.logger.error('This is an error message.');\n<% if (core) {%>\n        // Using the coreAPI to create an object.\n        var newNode = self.core.createNode({parent: self.rootNode, base: self.META['FCO']});\n        self.core.setAttribute(newNode, 'name', 'My new obj');\n        self.core.setRegistry(newNode, 'position', {x: 70, y: 70});\n<%}\nif (configStructure) {%>\n        // Obtain the current user configuration.\n        var currentConfig = self.getCurrentConfig();\n        self.logger.info('Current configuration ' + JSON.stringify(currentConfig, null, 4));\n<%}\nif (templateType) {%>\n        // First transform ejs-files into js files (needed for client-side runs) -> run Templates/combine_templates.js.\n        // See instructions in file. You must run this after any modifications to the ejs template.\n        var template<%=templateExt.toUpperCase()%> = ejs.render(TEMPLATES['<%=templateType%>.<%=templateExt%>.ejs'], {a: 'a', b: 'b'});\n        var templateFileName = 'generatedFiles/subDir/<%=templateType%>.<%=templateExt%>';\n        var artifact = self.blobClient.createArtifact('templateFiles');\n        artifact.addFile(templateFileName, template<%=templateExt.toUpperCase()%>, function (err) {\n            if (err) {\n                callback(err, self.result);\n                return;\n            }\n            self.blobClient.saveAllArtifacts(function (err, hashes) {\n                if (err) {\n                    callback(err, self.result);\n                    return;\n                }\n                // This will add a download hyperlink in the result-dialog.\n                self.result.addArtifact(hashes[0]);\n                // This will save the changes. If you don't want to save;\n                // exclude self.save and call callback directly from this scope.\n                self.result.setSuccess(true);\n                self.save('added obj', function (err) {\n                    callback(null, self.result);\n                });\n            });\n        });\n<%} else {%>\n        // This will save the changes. If you don't want to save;\n        // exclude self.save and call callback directly from this scope.\n        self.result.setSuccess(true);\n        self.save('added obj', function (err) {\n            callback(null, self.result);\n        });\n<%}%>\n    };\n\n    return <%= pluginID %>;\n});",
    "unit_test.js.ejs": "/**\n* Generated by PluginGenerator from webgme on <%= date %>.\n*/\n\n'use strict';\nvar testFixture = require('../../../globals');\n\ndescribe('<%= pluginID %>', function () {\n    var gmeConfig = testFixture.getGmeConfig(),\n        runPlugin = testFixture.runPlugin,\n        openContext = testFixture.WebGME.openContext,\n        expect = testFixture.expect,\n        pluginName = '<%= pluginID %>';\n\n    it('should run using local-storage with default config', function (done) {\n        var managerConfig = {\n                pluginName: pluginName,\n                projectName: 'testProject',\n                branchName: 'master',\n                activeNode: '/1',\n            },\n            pluginConfig = {},\n            options = {\n                localStorage: true,\n                importProject: './test/assets/sm_basic.json'\n            };\n        runPlugin(gmeConfig, managerConfig, pluginConfig, options, function (err, result/*, storage*/) {\n            expect(err).to.equal(null);\n\n            expect(result.success).to.equal(true);\n            done();\n        });\n    });\n\n    it('should run using serveruser-storage with default config', function (done) {\n        var managerConfig = {\n                pluginName: pluginName,\n                projectName: 'testProject',\n                branchName: 'master',\n                activeNode: '/1',\n            },\n            pluginConfig = {},\n            options = {\n                localStorage: false, // This requires that the database is connected\n                overwrite: true,\n                importProject: './test/assets/sm_basic.json'\n            };\n        runPlugin(gmeConfig, managerConfig, pluginConfig, options, function (err, result/*, storage*/) {\n            expect(err).to.equal(null);\n\n            expect(result.success).to.equal(true);\n            done();\n        });\n    });\n});"
}});